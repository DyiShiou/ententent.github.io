<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LeetCode Recipe</title>
    <link>https://leetcode.akaeecs.com/docs/codes/1500-to-1599/</link>
    <description>Recent content on LeetCode Recipe</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://leetcode.akaeecs.com/docs/codes/1500-to-1599/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://leetcode.akaeecs.com/docs/codes/1500-to-1599/1502.-Can-Make-Arithmetic-Progression-From-Sequence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leetcode.akaeecs.com/docs/codes/1500-to-1599/1502.-Can-Make-Arithmetic-Progression-From-Sequence/</guid>
      <description> 1502. Can Make Arithmetic Progression From Sequence # 题目 # 给你一个数字数组 arr 。 如果一个数列中，任意相邻两项的差总等于同一个常数，那么这个数列就称为 等差数列 。 如果可以重新排列数组形成等差数列，请返回 true ；否则，返回 false 。 思路 # 模拟 # 代码 # 模拟 # class Solution { public boolean canMakeArithmeticProgression(int[] arr) { Arrays.sort(arr); int diff = arr[0]-arr[1]; for (int i = 0; i &amp;lt; arr.length-1; i++) { if (arr[i]-arr[i+1] != diff) return false; } return true; } } </description>
    </item>
    
    <item>
      <title></title>
      <link>https://leetcode.akaeecs.com/docs/codes/1500-to-1599/1507.-Reformat-Date/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leetcode.akaeecs.com/docs/codes/1500-to-1599/1507.-Reformat-Date/</guid>
      <description>1507. Reformat Date # 题目 # 给你一个字符串 date ，它的格式为 Day Month Year ，其中： Day 是集合 {&amp;quot;1st&amp;quot;, &amp;quot;2nd&amp;quot;, &amp;quot;3rd&amp;quot;, &amp;quot;4th&amp;quot;, ..., &amp;quot;30th&amp;quot;, &amp;quot;31st&amp;quot;} 中的一个元素。 Month 是集合 {&amp;quot;Jan&amp;quot;, &amp;quot;Feb&amp;quot;, &amp;quot;Mar&amp;quot;, &amp;quot;Apr&amp;quot;, &amp;quot;May&amp;quot;, &amp;quot;Jun&amp;quot;, &amp;quot;Jul&amp;quot;, &amp;quot;Aug&amp;quot;, &amp;quot;Sep&amp;quot;, &amp;quot;Oct&amp;quot;, &amp;quot;Nov&amp;quot;, &amp;quot;Dec&amp;quot;} 中的一个元素。 Year 的范围在 [1900, 2100] 之间。 请你将字符串转变为 YYYY-MM-DD 的格式，其中： YYYY 表示 4 位的年份。 MM 表示 2 位的月份。 DD 表示 2 位的天数。 思路 # 模拟 # 代码 # 模拟 # class Solution { public String month2int(String month) { switch (month) { case &amp;#34;Jan&amp;#34;: return &amp;#34;01&amp;#34;; case &amp;#34;Feb&amp;#34;: return &amp;#34;02&amp;#34;; case &amp;#34;Mar&amp;#34;: return &amp;#34;03&amp;#34;; case &amp;#34;Apr&amp;#34;: return &amp;#34;04&amp;#34;; case &amp;#34;May&amp;#34;: return &amp;#34;05&amp;#34;; case &amp;#34;Jun&amp;#34;: return &amp;#34;06&amp;#34;; case &amp;#34;Jul&amp;#34;: return &amp;#34;07&amp;#34;; case &amp;#34;Aug&amp;#34;: return &amp;#34;08&amp;#34;; case &amp;#34;Sep&amp;#34;: return &amp;#34;09&amp;#34;; case &amp;#34;Oct&amp;#34;: return &amp;#34;10&amp;#34;; case &amp;#34;Nov&amp;#34;: return &amp;#34;11&amp;#34;; case &amp;#34;Dec&amp;#34;: return &amp;#34;12&amp;#34;; } return &amp;#34;&amp;#34;; } public String reformatDate(String date) { String year = date.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://leetcode.akaeecs.com/docs/codes/1500-to-1599/1518.-Water-Bottles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leetcode.akaeecs.com/docs/codes/1500-to-1599/1518.-Water-Bottles/</guid>
      <description>1518. Water Bottles # 题目 # 超市正在促销，你可以用 numExchange 个空水瓶从超市兑换一瓶水。最开始，你一共购入了 numBottles 瓶水。 如果喝掉了水瓶中的水，那么水瓶就会变成空的。 给你两个整数 numBottles 和 numExchange ，返回你 最多 可以喝到多少瓶水。 思路 # 模拟 # 数学 # 代码 # 模拟 # class Solution { public int numWaterBottles(int numBottles, int numExchange) { int drink = numBottles, empty = numBottles; while (empty / numExchange != 0) { drink += empty / numExchange; empty = empty / numExchange + empty % numExchange; } return drink; } } 数学 # 致谢 # 宫水三叶</description>
    </item>
    
    <item>
      <title></title>
      <link>https://leetcode.akaeecs.com/docs/codes/1500-to-1599/1550.-Three-Consecutive-Odds/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leetcode.akaeecs.com/docs/codes/1500-to-1599/1550.-Three-Consecutive-Odds/</guid>
      <description> 1550. Three Consecutive Odds # 题目 # 给你一个整数数组 arr，请你判断数组中是否存在连续三个元素都是奇数的情况：如果存在，请返回 true ；否则，返回 false 。 思路 # 模拟 # 代码 # 模拟 # class Solution { public boolean threeConsecutiveOdds(int[] arr) { for (int i = 0; i &amp;lt; arr.length; i++) { if (arr[i] % 2 == 1) { if ((i+1 &amp;lt; arr.length &amp;amp;&amp;amp; arr[i+1] % 2 == 1) &amp;amp;&amp;amp; (i+2 &amp;lt; arr.length &amp;amp;&amp;amp; arr[i+2] % 2 == 1)) return true; } } return false; } } </description>
    </item>
    
    <item>
      <title></title>
      <link>https://leetcode.akaeecs.com/docs/codes/1500-to-1599/1576.-Replace-All-s-to-Avoid-Consecutive-Repeating-Characters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leetcode.akaeecs.com/docs/codes/1500-to-1599/1576.-Replace-All-s-to-Avoid-Consecutive-Repeating-Characters/</guid>
      <description>1576. Replace All ?&amp;rsquo;s to Avoid Consecutive Repeating Characters # 题目 # 给定一个仅包含小写英文字母和 &#39;?&#39; 字符的字符串 s，将所有的 &#39;?&#39; 转换为若干小写字母，使最终的字符串不包含任何 连续重复 的字符。 不能 修改非 &#39;?&#39; 字符。 除 &#39;?&#39; 字符 之外，不存在连续重复的字符。 在完成所有转换（可能无需转换）后返回最终的字符串。如果有多个解决方案，请返回其中任何一个。 思路 # 模拟 # 代码 # 模拟 # class Solution { private Random random = new Random(); public Character findCandidate(Character ban1, Character ban2) { Character ans = &amp;#39;a&amp;#39;; while (ans == ban1 || ans == ban2) { ans = (char)(&amp;#39;a&amp;#39; + this.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://leetcode.akaeecs.com/docs/codes/1500-to-1599/1582.-Special-Positions-in-a-Binary-Matrix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leetcode.akaeecs.com/docs/codes/1500-to-1599/1582.-Special-Positions-in-a-Binary-Matrix/</guid>
      <description>1582. Special Positions in a Binary Matrix # 题目 # 给你一个大小为 rows x cols 的矩阵 mat，其中 mat[i][j] 是 0 或 1，请返回 矩阵 mat 中特殊位置的数目 。 特殊位置 定义：如果 mat[i][j] == 1 并且第 i 行和第 j 列中的所有其他元素均为 0（行和列的下标均 从 0 开始 ），则位置 (i, j) 被称为特殊位置。 思路 # 模拟 # 代码 # 模拟 # class Solution { public int numSpecial(int[][] mat) { Map&amp;lt;Integer, Integer&amp;gt; cntRows = new HashMap&amp;lt;&amp;gt;(); Map&amp;lt;Integer, Integer&amp;gt; cntCols = new HashMap&amp;lt;&amp;gt;(); for (int i = 0; i &amp;lt; mat.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://leetcode.akaeecs.com/docs/codes/1500-to-1599/1592.-Rearrange-Spaces-Between-Words/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leetcode.akaeecs.com/docs/codes/1500-to-1599/1592.-Rearrange-Spaces-Between-Words/</guid>
      <description>1592. Rearrange Spaces Between Words # 题目 # 给你一个字符串 text ，该字符串由若干被空格包围的单词组成。每个单词由一个或者多个小写英文字母组成，并且两个单词之间至少存在一个空格。题目测试用例保证 text 至少包含一个单词 。 请你重新排列空格，使每对相邻单词之间的空格数目都 相等 ，并尽可能 最大化 该数目。如果不能重新平均分配所有空格，请 将多余的空格放置在字符串末尾 ，这也意味着返回的字符串应当与原 text 字符串的长度相等。 返回 重新排列空格后的字符串 。 思路 # 模拟 # 代码 # 模拟 # class Solution { public String reorderSpaces(String text) { int numLetters = 0; List&amp;lt;String&amp;gt; words = new LinkedList&amp;lt;&amp;gt;(); String word = &amp;#34;&amp;#34;; for (int i = 0; i &amp;lt; text.length(); i++) { if (Character.isLetter(text.charAt(i))) word += text.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://leetcode.akaeecs.com/docs/codes/1500-to-1599/1598.-Crawler-Log-Folder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leetcode.akaeecs.com/docs/codes/1500-to-1599/1598.-Crawler-Log-Folder/</guid>
      <description>1598. Crawler Log Folder # 题目 # 每当用户执行变更文件夹操作时，LeetCode 文件系统都会保存一条日志记录。下面给出对变更操作的说明： &amp;quot;../&amp;quot; ：移动到当前文件夹的父文件夹。如果已经在主文件夹下，则 继续停留在当前文件夹 。 &amp;quot;./&amp;quot; ：继续停留在当前文件夹**。** &amp;quot;x/&amp;quot; ：移动到名为 x 的子文件夹中。题目数据 保证总是存在文件夹 x 。 给你一个字符串列表 logs ，其中 logs[i] 是用户在 ith 步执行的操作。 文件系统启动时位于主文件夹，然后执行 logs 中的操作。 执行完所有变更文件夹操作后，请你找出 返回主文件夹所需的最小步数 。 思路 # 模拟 # 代码 # 模拟 # class Solution { public int minOperations(String[] logs) { int ans = 0; for (String log: logs) { switch (log) { case &amp;#34;../&amp;#34;: if (ans &amp;gt; 0) ans -= 1; break; case &amp;#34;.</description>
    </item>
    
  </channel>
</rss>
