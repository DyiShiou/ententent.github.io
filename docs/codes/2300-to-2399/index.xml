<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LeetCode Recipe</title>
    <link>https://leetcode.akaeecs.com/docs/codes/2300-to-2399/</link>
    <description>Recent content on LeetCode Recipe</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://leetcode.akaeecs.com/docs/codes/2300-to-2399/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://leetcode.akaeecs.com/docs/codes/2300-to-2399/2319.-Check-if-Matrix-is-X-Matrix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leetcode.akaeecs.com/docs/codes/2300-to-2399/2319.-Check-if-Matrix-is-X-Matrix/</guid>
      <description>2319. Check if Matrix Is X-Matrix # 题目 # X 矩阵 是满足下列条件的方阵 矩阵对角线上所有元素都 非零 非对角线元素均 为零 给定 n 阶方阵 grid，判断 grid 是否为 X 矩阵 思路 # 模拟 # 代码 # 模拟 # class Solution { public boolean checkXMatrix(int[][] grid) { boolean valid = true; for (int i = 0; i &amp;lt; grid.length; i++) { for (int j = 0; j &amp;lt; grid.length; j++) { if (i == j) valid &amp;amp;= grid[i][j] !</description>
    </item>
    
    <item>
      <title></title>
      <link>https://leetcode.akaeecs.com/docs/codes/2300-to-2399/2325.-Decode-the-Message/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leetcode.akaeecs.com/docs/codes/2300-to-2399/2325.-Decode-the-Message/</guid>
      <description>2325. Decode the Message # 题目 # 给定字符串 key 和 message ，分别表示 密钥 和 密文。解密步骤如下：
使用 key 中 26 个英文小写字母第一次出现的顺序作为替换表中的字母 顺序 。 将替换表与普通英文字母表对齐，形成 对照表。 按照对照表 替换 message 中的每个字母。 空格 &#39; &#39; 保持不变。 例如，key = &amp;quot;happy boy&amp;quot;（实际的加密密钥会包含字母表中每个字母 至少一次），得到部分对照表（&#39;h&#39; -&amp;gt; &#39;a&#39;、&#39;a&#39; -&amp;gt; &#39;b&#39;、&#39;p&#39; -&amp;gt; &#39;c&#39;、&#39;y&#39; -&amp;gt; &#39;d&#39;、&#39;b&#39; -&amp;gt; &#39;e&#39;、&#39;o&#39; -&amp;gt; &#39;f&#39;）。
返回解密后的消息。
思路 # 哈希 # 代码 # 哈希 # class Solution { public String decodeMessage(String key, String message) { Map&amp;lt;Character, Character&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); char charPoint = &amp;#39;a&amp;#39;; for (int i = 0; i &amp;lt; key.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://leetcode.akaeecs.com/docs/codes/2300-to-2399/2326.-Spiral-Matrix-IV/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leetcode.akaeecs.com/docs/codes/2300-to-2399/2326.-Spiral-Matrix-IV/</guid>
      <description> 2326. Spiral Matrix IV # 题目 # 给定两个整数 m 和 n，表示矩阵的维数。
另外给定一个整数链表的头节点 head。
生成并返回一个大小为 m x n 的螺旋矩阵，矩阵包含链表中的所有整数。链表中的整数从矩阵左上角开始、顺时针按螺旋顺序填充。如果还存在剩余的空格，则用 -1 填充。
思路 # 代码 # class Solution { public int getValue(ListNode[] ptr) { if (ptr[0] == null) return -1; int value = ptr[0].val; ptr[0] = ptr[0].next; return value; } public void helper(int[][] result, int top, int bottom, int left, int right, ListNode[] ptr) { if (top &amp;gt; bottom || left &amp;gt; right) return; if (top == bottom) { for (int j=left; j&amp;lt;=right; j++) result[top][j] = getValue(ptr); return; } if (left == right) { for (int i=top; i&amp;lt;=bottom; i++) result[i][left] = getValue(ptr); return; } else { for (int j=left; j&amp;lt;right; j++) result[top][j] = getValue(ptr); for (int i=top; i&amp;lt;bottom; i++) result[i][right] = getValue(ptr); for (int j=right; j&amp;gt;left; j--) result[bottom][j] = getValue(ptr); for (int i=bottom; i&amp;gt;top; i--) result[i][left] = getValue(ptr); } helper(result, top+1, bottom-1, left+1, right-1, ptr); } public int[][] spiralMatrix(int m, int n, ListNode head) { int[][] result = new int[m][n]; ListNode[] ptr = new ListNode[1]; ptr[0] = head; helper(result, 0, m-1, 0, n-1, ptr); return result; } } </description>
    </item>
    
    <item>
      <title></title>
      <link>https://leetcode.akaeecs.com/docs/codes/2300-to-2399/2331.-Evaluate-Boolean-Binary-Tree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leetcode.akaeecs.com/docs/codes/2300-to-2399/2331.-Evaluate-Boolean-Binary-Tree/</guid>
      <description>2331. Evaluate Boolean Binary Tree # 题目 # 给定一棵 完整二叉树 的根，这棵树有以下特征：
叶子节点 要么值为 0 要么值为 1，其中 0 表示 false，1 表示 true。 非叶子节点 要么值为 2 要么值为 3，其中 2 表示逻辑或 OR，3表示逻辑与 AND。 计算一个节点的值方式如下：
如果节点是个叶子节点，那么节点的 值 为它本身，即 true 或 false。 否则，计算 两个孩子的节点值，然后将该节点的运算符对两个孩子值进行 运算。 返回根节点 root 的不二运算值。
完整二叉树 是每个节点有 0 个或者 2 个孩子的二叉树。
思路 # 代码 # public class TreeNode { int val; TreeNode left; TreeNode right; TreeNode() {} TreeNode(int val) { this.val = val; } TreeNode(int val, TreeNode left, TreeNode right) { this.</description>
    </item>
    
  </channel>
</rss>
