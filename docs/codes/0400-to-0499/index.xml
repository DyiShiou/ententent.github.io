<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LeetCode Recipe</title>
    <link>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/</link>
    <description>Recent content on LeetCode Recipe</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://leetcode.akaeecs.com/docs/codes/0400-to-0499/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0400.-Nth-Digit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0400.-Nth-Digit/</guid>
      <description>0400. Nth Digit # 题目 # 给你一个整数 n ，请你在无限的整数序列 [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...] 中找出并返回第 n 位上的数字。 模拟 # 代码 # 模拟 # class Solution { public int findNthDigit(int n) { /** * 1位数有9个 * 2位数有10~99 共90个 * 3位数有100~999 共900个 * 4位数有1000~9999 共9000个 */ /** * 1. 首先确定第n位数所对应的数字是k位数 * 2. 然后确定第n位数中第i个数字 * 3. 对这个数字分解各数位, 然后返回 */ int sum = 0, k = 0; while (sum &amp;lt; n) { k++; sum += 9 * Math.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0405.-Convert-a-Number-to-Hexadecimal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0405.-Convert-a-Number-to-Hexadecimal/</guid>
      <description>0405. Convert a Number to Hexadecimal # 题目 # 给定一个整数，将这个数转换为十六进制数。 对于负整数，通常使用补码运算方式。 十六进制中所有字母(a-f)都必须是小写。 十六进制字符串中不能包含多余的前导零。如果要转化的数为0，那么以单个字符&#39;0&#39;来表示；对于其他情况，十六进制字符串中的第一个字符将不会是0字符。 给定的数确保在32位有符号整数范围内。 不能使用任何由库提供的将数字直接转换或格式化为十六进制的方法。 思路 # 模拟 # 代码 # 模拟 # class Solution { public String int2hex(int num) { switch (num) { case 0x00000000 : return &amp;#34;0&amp;#34;; case 0x10000000 : return &amp;#34;1&amp;#34;; case 0x20000000 : return &amp;#34;2&amp;#34;; case 0x30000000 : return &amp;#34;3&amp;#34;; case 0x40000000 : return &amp;#34;4&amp;#34;; case 0x50000000 : return &amp;#34;5&amp;#34;; case 0x60000000 : return &amp;#34;6&amp;#34;; case 0x70000000 : return &amp;#34;7&amp;#34;; case 0x80000000 : return &amp;#34;8&amp;#34;; case 0x90000000 : return &amp;#34;9&amp;#34;; case 0xa0000000 : return &amp;#34;a&amp;#34;; case 0xb0000000 : return &amp;#34;b&amp;#34;; case 0xc0000000 : return &amp;#34;c&amp;#34;; case 0xd0000000 : return &amp;#34;d&amp;#34;; case 0xe0000000 : return &amp;#34;e&amp;#34;; case 0xf0000000 : return &amp;#34;f&amp;#34;; } return &amp;#34;&amp;#34;; } public String toHex(int num) { if (num == 0) return &amp;#34;0&amp;#34;; boolean flag = false; String ans = &amp;#34;&amp;#34;; for (int i = 0; i &amp;lt; 8; i++) { int and = num &amp;amp; 0xf0000000; if (and !</description>
    </item>
    
    <item>
      <title></title>
      <link>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0412.-Fizz-Buzz/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0412.-Fizz-Buzz/</guid>
      <description>0412. Fizz Buzz # 题目 # 给定整数 n ，找出 1 至 n 各个整数的 Fizz Buzz 表示，并用字符串数组 answer（下标从 1 开始）返回结果，其中：
answer[i] == &amp;quot;FizzBuzz&amp;quot; 如果 i 同时是 3 和 5 的倍数。
answer[i] == &amp;quot;Fizz&amp;quot; 如果 i 是 3 的倍数。
answer[i] == &amp;quot;Buzz&amp;quot; 如果 i 是 5 的倍数。
answer[i] == i （以字符串形式）如果上述条件全不满足。
思路 # 模拟 # 代码 # 模拟 # class Solution { public List&amp;lt;String&amp;gt; fizzBuzz(int n) { List&amp;lt;String&amp;gt; ans = new LinkedList&amp;lt;&amp;gt;(); for (int i = 1; i &amp;lt;= n; i++) { if (i % 3 == 0 &amp;amp;&amp;amp; i % 5 == 0) ans.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0414.-Third-Maximum-Number/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0414.-Third-Maximum-Number/</guid>
      <description>0414. Third Maximum Number # 题目 # 给定一个非空数组，返回该数组中 第三大的数。 如果不存在，则返回数组中最大的数。 注: 要求返回第三大的数，是指在所有不同数字中排第三大的数。 思路 # 模拟 + 哈希 # 代码 # 模拟 + 哈希 # class Solution { public int thirdMax(int[] nums) { Set&amp;lt;Integer&amp;gt; set = new HashSet&amp;lt;&amp;gt;(); int first = Integer.MIN_VALUE, second = Integer.MIN_VALUE, third = Integer.MIN_VALUE; for (int num: nums) { if (set.contains(num) == false) { if (set.size() == 0) first = num; else if (set.size() == 1) { second = first &amp;gt; num ?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0423.-Reconstruct-Original-Digits-from-English/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0423.-Reconstruct-Original-Digits-from-English/</guid>
      <description>0423. Reconstruct Original Digits from English # 题目 # 给你一个字符串 s ，其中包含字母顺序打乱的用英文单词表示的若干数字（0-9）。按 升序 返回原始的数字。 例如: 输入：s = &amp;#34;owoztneoer&amp;#34; 输出：&amp;#34;012&amp;#34; 思路 # 模拟 # 代码 # 模拟 # class Solution { public String originalDigits(String s) { /** zero -&amp;gt; &amp;#39;z&amp;#39; one -&amp;gt; &amp;#39;o&amp;#39; two -&amp;gt; &amp;#39;w&amp;#39; three -&amp;gt; &amp;#39;h&amp;#39; four -&amp;gt; &amp;#39;u&amp;#39; five -&amp;gt; &amp;#39;f&amp;#39; six -&amp;gt; &amp;#39;x&amp;#39; seven -&amp;gt; &amp;#39;s&amp;#39; eight -&amp;gt; &amp;#39;g&amp;#39; nine -&amp;gt; &amp;#39;i&amp;#39; */ int[] cnt = new int[26]; for (int i = 0; i &amp;lt; s.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0429.-N-ary-Tree-Level-Order-Traversal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0429.-N-ary-Tree-Level-Order-Traversal/</guid>
      <description>0429. N-ary Tree Level Order Traversal # 题目 # 给定一个 N 叉树，返回其节点的 层序遍历。
思路 # 代码 # class Node { public int val; public List&amp;lt;Node&amp;gt; children; public Node() {} public Node(int _val) { val = _val; } public Node(int _val, List&amp;lt;Node&amp;gt; _children) { val = _val; children = _ children; } } class Solution { public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; levelOrder(Node root) { List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; ans = new LinkedList&amp;lt;&amp;gt;(); if (root == null) return ans; Queue&amp;lt;Node&amp;gt; queue = new LinkedList&amp;lt;&amp;gt;(); queue.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0430.-Flatten-a-Multilevel-Doubly-Linked-List/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0430.-Flatten-a-Multilevel-Doubly-Linked-List/</guid>
      <description>430. Flatten a Multilevel Doubly Linked List # 题目 # 给定一个双链表，各节点有一个 next 指针、一个 prev 指针和一个的 child 指针 。这个 child 指针 可能指向一个单独的双向链表，也包含这些特殊的节点。这些子列表可以有一个或多个自己的子列表，从而构成 多层数据结构 。
给定链表的头节点 head ，将链表 扁平化 ，使所有节点都出现在单层双链表中。让 curr 是一个带有子列表的节点。子列表中的节点应该出现在扁平化列表中的 curr 之后 和 curr.next 之前 。
返回 扁平列表的 head 。列表中的节点必须将其 所有 子指针设置为 null 。
思路 # 代码 # public class ListNode { int val; ListNode next; ListNode() {} ListNode(int val) { this.val = val; } ListNode(int val, ListNode next) { this.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0432.-All-O1-Data-Structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0432.-All-O1-Data-Structure/</guid>
      <description>432. All O(1) Data Structure # 题目 # 设计一个用于存储字符串计数的数据结构，并能够返回计数最小和最大的字符串。
实现 AllOne 类：
AllOne() 初始化数据结构的对象。 inc(String key) 字符串 key 的计数增加 1 。如果数据结构中尚不存在 key ，那么插入计数为 1 的 key 。 dec(String key) 字符串 key 的计数减少 1 。如果 key 的计数在减少后为 0 ，那么需要将这个 key 从数据结构中删除。测试用例保证：在减少计数前，key 存在于数据结构中。 getMaxKey() 返回任意一个计数最大的字符串。如果没有元素存在，返回一个空字符串 &amp;quot;&amp;quot; 。 getMinKey() 返回任意一个计数最小的字符串。如果没有元素存在，返回一个空字符串 &amp;quot;&amp;quot; 。 **注意：**每个函数都应当满足 O(1) 平均时间复杂度。
思路 # 采用 双向链表 + 哈希表 的方式实现。 链表结点记录 频率 以及 该频率对应的字符串集合，以 Max &amp;lt;&amp;ndash;&amp;gt; Min 的顺序存储。 HashSet 可以在 O(1) 的时间复杂度内实现 add 和 remove 操作。 代码 # class AllOne { private class ListNode { public int count; public Set&amp;lt;String&amp;gt; collection; public ListNode prev; public ListNode next; ListNode(int count, ListNode prev, ListNode next) { this.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0434.-Number-of-Segments-in-a-String/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0434.-Number-of-Segments-in-a-String/</guid>
      <description> 0434. Number of Segments in a String # 题目 # 统计字符串中的单词个数，这里的单词指的是连续的非空格的字符。 假定字符串不包括任何不可打印的字符。 思路 # 模拟 # 代码 # 模拟 # class Solution { public int countSegments(String s) { if (s.length() == 0) return 0; int ans = s.charAt(0) == &amp;#39; &amp;#39; ? 0 : 1, ptr = 0; while (ptr &amp;lt; s.length() - 1) { if (s.charAt(ptr) == &amp;#39; &amp;#39; &amp;amp;&amp;amp; s.charAt(ptr + 1) != &amp;#39; &amp;#39;) { ans++; ptr += 2; } else ptr++; } return ans; } } </description>
    </item>
    
    <item>
      <title></title>
      <link>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0441.-Arranging-Coins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0441.-Arranging-Coins/</guid>
      <description> 0441. Arranging Coins # 题目 # 共有 n 枚硬币，将它们按阶梯状排列。 对于一个由 k 行组成的阶梯，其第 i 行必须正好有 i 枚硬币。阶梯的最后一行 可能 是不完整的。 给定数字 n，计算并返回可形成 完整阶梯行 的总行数。 1 &amp;lt;= n &amp;lt;= 2^31 - 1 思路 # 二分查找 # 代码 # 二分查找 # class Solution { public long capacity(int k) { return (long) k * (k + 1) / 2; } public int arrangeCoins(int n) { /** left 表示已知能填充满的最大行数, right 是已知不能填充满的最小行数 */ int left = 1, right = n; while (left &amp;lt; right - 1) { int mid = left + (right - left) / 2; if (capacity(mid) == n) return mid; else if (capacity(mid) &amp;gt; n) right = mid; else left = mid; } return left; } } </description>
    </item>
    
    <item>
      <title></title>
      <link>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0443.-String-Compression/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0443.-String-Compression/</guid>
      <description>443. String Compression # 题目 # 给你一个字符数组 chars ，请使用下述算法压缩： 从一个空字符串 s 开始。对于 chars 中的每组 连续重复字符 ： 如果这一组长度为 1 ，则将字符追加到 s 中。 否则，需要向 s 追加字符，后跟这一组的长度。 压缩后得到的字符串 s 不应该直接返回 ，需要转储到字符数组 chars 中。需要注意的是，如果组长度为 10 或 10 以上，则在 chars 数组中会被拆分为多个字符。 请在 修改完输入数组后 ，返回该数组的新长度。 你必须设计并实现一个只使用常量额外空间的算法来解决此问题。 思路 # 模拟 # 代码 # 模拟 # class Solution { public int compress(char[] chars) { int ans = 0; char cur = chars[0]; int cnt = 0, ptr = 0; for (char ch: chars) { if (ch == cur) cnt++; else { chars[ptr++] = cur; ans++; if (cnt &amp;gt; 1) { char[] arr = String.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0445.-Add-Two-Numbers-ii/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0445.-Add-Two-Numbers-ii/</guid>
      <description>445. Add Two Numbers II # 题目 # 给定两个非空链表来代表两个非负整数。数字最高位位于链表开始位置。它们的每个节点只存储一位数字。将这两数相加会返回一个新的链表。
思路 # 代码 # public class ListNode { int val; ListNode next; ListNode() {} ListNode(int val) { this.val = val; } ListNode(int val, ListNode next) { this.val = val; this.next = next; } } class Solution { public int helper(ListNode l1, ListNode l2) { if (l1.next == null &amp;amp;&amp;amp; l2.next == null) { int carry = (l1.val + l2.val) / 10; l1.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0448.-Find-All-Numbers-Disappeared-in-an-Arry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0448.-Find-All-Numbers-Disappeared-in-an-Arry/</guid>
      <description>0448. Find All Numbers Disappeared in an Array # 题目 # 给定一个含 n 个整数的数组 nums，其中 nums[i] 在区间 [1, n] 内。找出所有在 [1, n] 范围内但没有出现在 nums 中的数字，并以数组的形式返回结果。
思路 # 原地哈希 代码 # class Solution { public List&amp;lt;Integer&amp;gt; findDisappearedNumbers(int[] nums) { for (int num: nums) { if (nums[Math.abs(num) - 1] &amp;gt; 0) nums[Math.abs(num) - 1] *= -1; } List&amp;lt;Integer&amp;gt; ans = new LinkedList&amp;lt;&amp;gt;(); for (int i = 0; i &amp;lt; nums.length; i++) { if (nums[i] &amp;gt; 0) ans.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0455.-Assign-Cookies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0455.-Assign-Cookies/</guid>
      <description>0455. Assign Cookies # 题目 # 为孩子们分配饼干，每个孩子最多只能给一块饼干。 孩子 i 对应胃口值 g[i]。饼干 j 对应尺寸 s[j]。若 s[j] &amp;gt;= g[i]，则饼干 j 可以令孩子 i 满足。 尽可能满足最多数量的孩子，并返回这个最大数值。 思路 # 排序+双指针+贪心 代码 # 排序+双指针+贪心 # class Solution { public int findContentChildren(int[] g, int[] s) { Arrays.sort(g); Arrays.sort(s); int i = 0, j = 0; while (i &amp;lt; g.length &amp;amp;&amp;amp; j &amp;lt; s.length) { while (j &amp;lt; s.length &amp;amp;&amp;amp; g[i] &amp;gt; s[j]) j += 1; if (j++ &amp;lt; s.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0460.-LFU-Cache/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0460.-LFU-Cache/</guid>
      <description>460. LFU Cache # 题目 # 为 最不经常使用（LFU）缓存算法设计并实现数据结构。
实现 LFUCache 类：
LFUCache(int capacity) - 用数据结构的容量 capacity 初始化对象 int get(int key) - 如果键 key 存在于缓存中，则获取键的值，否则返回 -1 。 void put(int key, int value) - 如果键 key 已存在，则变更其值；如果键不存在，请插入键值对。当缓存达到其容量 capacity 时，则应该在插入新项之前，移除最不经常使用的项。在此问题中，当存在平局（即两个或更多个键具有相同使用频率）时，应该去除 最近最久未使用 的键。 为了确定最不常使用的键，可以为缓存中的每个键维护一个 使用计数器 。使用计数最小的键是最久未使用的键。
当一个键首次插入到缓存中时，它的使用计数器被设置为 1 (由于 put 操作)。对缓存中的键执行 get 或 put 操作，使用计数器的值将会递增。
函数 get 和 put 必须以 O(1) 的平均时间复杂度运行。
思路 # 代码 # class LFUCache { private class ListNode { public int key; public int frequency; public int val; public ListNode prev; public ListNode next; ListNode(int key, int value, ListNode prev, ListNode next) { this.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0461.-Hamming-Distance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0461.-Hamming-Distance/</guid>
      <description> 461. Hamming Distance # 题目 # 两个整数之间的 汉明距离 指的是这两个数字对应二进制位不同的位置的数目。
给定两个整数 x 和 y，计算并返回它们之间的汉明距离。
思路 # 异或 + 统计 1 的数目
代码 # 汉明距离 # class Solution { public int hammingDistance(int x, int y) { int sum = x ^ y; int hammingDistance = 0; for (int i=31; i&amp;gt;=0; i--) { if (((sum &amp;gt;&amp;gt; i) &amp;amp; 1) == 1) hammingDistance += 1; } return hammingDistance; } } </description>
    </item>
    
    <item>
      <title></title>
      <link>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0468.-Validate-IP-Address/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0468.-Validate-IP-Address/</guid>
      <description>0468. Validate IP Address # 题目 # 给定一个字符串 queryIP。如果是有效的 IPv4 地址，返回 &amp;quot;IPv4&amp;quot; ；如果是有效的 IPv6 地址，返回 &amp;quot;IPv6&amp;quot; ；如果不是上述类型的 IP 地址，返回 &amp;quot;Neither&amp;quot; 。 有效的IPv4地址 是 “x1.x2.x3.x4” 形式的IP地址。 其中 0 &amp;lt;= xi &amp;lt;= 255 且 xi 不能包含 前导零。例如: “192.168.1.1” 、 “192.168.1.0” 为有效IPv4地址， “192.168.01.1” 为无效IPv4地址; “192.168.1.00” 、 “192.168@1.1” 为无效IPv4地址。 一个有效的IPv6地址 是一个格式为“x1:x2:x3:x4:x5:x6:x7:x8” 的IP地址，其中: 1 &amp;lt;= xi.length &amp;lt;= 4 xi 是一个 十六进制字符串 ，可以包含数字、小写英文字母( &#39;a&#39; 到 &#39;f&#39; )和大写英文字母( &#39;A&#39; 到 &#39;F&#39; )。 在 xi 中允许前导零。 例如 &amp;quot;2001:0db8:85a3:0000:0000:8a2e:0370:7334&amp;quot; 和 &amp;quot;2001:db8:85a3:0:0:8A2E:0370:7334&amp;quot; 是有效的 IPv6 地址，而 &amp;quot;2001:0db8:85a3::8A2E:037j:7334&amp;quot; 和 &amp;quot;02001:0db8:85a3:0000:0000:8a2e:0370:7334&amp;quot; 是无效的 IPv6 地址。 思路 # 模拟 # 代码 # 模拟 # class Solution { public boolean isIPv4(String ip) { String[] parts = ip.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0476.-Number-Complement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0476.-Number-Complement/</guid>
      <description> 476. Number Complement # 题目 # 对整数的二进制表示取反 (0 变 1，1 变 0) 后，再转换为十进制表示，可以得到这个整数的补数。
如整数 5 的二进制表示是 &amp;quot;101&amp;quot;，取反后得到 &amp;quot;010&amp;quot;，再转回十进制表示得到补数 2。
给定一个整数，输出其补数。
注: 1 &amp;lt;= num &amp;lt; 2^31
思路 # 代码 # class Solution { public int findComplement(int num) { if (num == 0) return 1; boolean flag = false; for (int i = 30; i &amp;gt;= 0; i--) { if (((num &amp;gt;&amp;gt; i) &amp;amp; 1) == 1) flag = true; if (flag == true) { num ^= 1 &amp;lt;&amp;lt; i; } } return num; } } </description>
    </item>
    
    <item>
      <title></title>
      <link>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0482.-License-Key-Formatting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0482.-License-Key-Formatting/</guid>
      <description>0482. License Key Formatting # 题目 # 给定许可密钥字符串 s，仅由字母、数字字符和破折号组成。字字符串由 n 个破折号分成 n+1组。 给定整数 k 以重新格式化字符串，使每一组包含 k 个字符。 第一组可以比 k 短，但仍必须包含至少一个字符。 两组之间需要插入破折号，且应该将所有小写字母转换为大写字母。 思路 # 模拟 # 代码 # 模拟 # class Solution { public String licenseKeyFormatting(String s, int k) { /** 遍历 s, 确定格式化后的密钥长度 */ int numLetterOrDigits = 0; for (int i = 0; i &amp;lt; s.length(); i++) { if (Character.isLetterOrDigit(s.charAt(i))) numLetterOrDigits++; } int sz = numLetterOrDigits; if (sz == 0) return &amp;#34;&amp;#34;; sz += numLetterOrDigits % k == 0 ?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0485.-Max-Consecutive-Ones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0485.-Max-Consecutive-Ones/</guid>
      <description> 0485. Max Consecutive Ones # 题目 # 给定二进制数组 nums，计算其中最大连续 1 的个数。 思路 # 模拟 # 代码 # 模拟 # class Solution { public int findMaxConsecutiveOnes(int[] nums) { int ans = 0, cnt = 0; for (int num: nums) { if (num == 0) cnt = 0; else ans = Math.max(ans, ++cnt); } return ans; } } </description>
    </item>
    
    <item>
      <title></title>
      <link>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0492.-Construct-the-Rectangle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0492.-Construct-the-Rectangle/</guid>
      <description>0492. Construct the Rectangle # 题目 # 作为一位web开发者， 懂得怎样去规划一个页面的尺寸是很重要的。 所以，现给定一个具体的矩形页面面积，你的任务是设计一个长度为 L 和宽度为 W 且满足以下要求的矩形的页面。要求： 你设计的矩形页面必须等于给定的目标面积。 宽度 W 不应大于长度 L ，换言之，要求 L &amp;gt;= W 。 长度 L 和宽度 W 之间的差距应当尽可能小。 返回一个 数组 [L, W]，其中 L 和 W 是你按照顺序设计的网页的长度和宽度。 思路 # 模拟 # 代码 # 模拟 # class Solution { public int[] constructRectangle(int area) { int[] ans = new int[2]; for (int w = 1; w &amp;lt;= Math.sqrt(area); w++) { if (area % w == 0) { ans[0] = area / w; ans[1] = w; } } return ans; } } 致谢 # 宫水三叶</description>
    </item>
    
    <item>
      <title></title>
      <link>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0495.-Teemo-Attacking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leetcode.akaeecs.com/docs/codes/0400-to-0499/0495.-Teemo-Attacking/</guid>
      <description>495. Teemo Attacking # 题目 # 在《英雄联盟》的世界中，有一个叫 “提莫” 的英雄。他的攻击可以让敌方英雄艾希（编者注：寒冰射手）进入中毒状态。
当提莫攻击艾希，艾希的中毒状态正好持续 duration 秒。
正式地讲，提莫在 t 发起发起攻击意味着艾希在时间区间 [t, t + duration - 1]（含 t 和 t + duration - 1）处于中毒状态。如果提莫在中毒影响结束 前 再次攻击，中毒状态计时器将会 重置 ，在新的攻击之后，中毒影响将会在 duration 秒后结束。
给你一个 非递减 的整数数组 timeSeries ，其中 timeSeries[i] 表示提莫在 timeSeries[i] 秒时对艾希发起攻击，以及一个表示中毒持续时间的整数 duration 。
返回艾希处于中毒状态的 总 秒数。
思路 # 代码 # class Solution { public int findPoisonedDuration(int[] timeSeries, int duration) { int lasting = 0; for (int i = 0; i &amp;lt; timeSeries.</description>
    </item>
    
  </channel>
</rss>
